'use client';

import { useState } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { useAuthStore } from '@/store/authStore';
import { Button } from '@/components/ui/button';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import { Smile, Heart, ThumbsUp, Laugh, Frown, Angry } from 'lucide-react';

interface EmojiReactionProps {
  messageId: string;
  reactions?: {
    emoji: string;
    count: number;
    users: string[];
  }[];
}

const EMOJI_OPTIONS = [
  { emoji: 'üëç', icon: ThumbsUp, label: 'Ï¢ãÏïÑÏöî' },
  { emoji: '‚ù§Ô∏è', icon: Heart, label: 'ÌïòÌä∏' },
  { emoji: 'üòÇ', icon: Laugh, label: 'ÏõÉÏùå' },
  { emoji: 'üòÆ', icon: Smile, label: 'ÎÜÄÎûå' },
  { emoji: 'üò¢', icon: Frown, label: 'Ïä¨Ìîî' },
  { emoji: 'üò°', icon: Angry, label: 'ÌôîÎÇ®' },
];

export function EmojiReaction({ messageId, reactions = [] }: EmojiReactionProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [localReactions, setLocalReactions] = useState(reactions);
  const supabase = createClientComponentClient();
  const user = useAuthStore((state) => state.user);

  const handleReaction = async (emoji: string) => {
    if (!user) return;

    try {
      // Ïù¥ÎØ∏ Î¶¨Ïï°ÏÖòÌïú Í≤ΩÏö∞ Ï†úÍ±∞, ÏïÑÎãàÎ©¥ Ï∂îÍ∞Ä
      const existingReaction = await supabase
        .from('message_reactions')
        .select('*')
        .eq('message_id', messageId)
        .eq('user_id', user.id)
        .eq('emoji', emoji)
        .single();

      if (existingReaction.data) {
        // Î¶¨Ïï°ÏÖò Ï†úÍ±∞
        await supabase
          .from('message_reactions')
          .delete()
          .eq('id', existingReaction.data.id);

        // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        setLocalReactions((prev) =>
          prev.map((r) =>
            r.emoji === emoji
              ? {
                  ...r,
                  count: r.count - 1,
                  users: r.users.filter((u) => u !== user.id),
                }
              : r
          ).filter((r) => r.count > 0)
        );
      } else {
        // Î¶¨Ïï°ÏÖò Ï∂îÍ∞Ä
        await supabase.from('message_reactions').insert({
          message_id: messageId,
          user_id: user.id,
          emoji,
        });

        // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        setLocalReactions((prev) => {
          const existing = prev.find((r) => r.emoji === emoji);
          if (existing) {
            return prev.map((r) =>
              r.emoji === emoji
                ? {
                    ...r,
                    count: r.count + 1,
                    users: [...r.users, user.id],
                  }
                : r
            );
          }
          return [...prev, { emoji, count: 1, users: [user.id] }];
        });
      }

      setIsOpen(false);
    } catch (error) {
      console.error('Î¶¨Ïï°ÏÖò Ï≤òÎ¶¨ Ïã§Ìå®:', error);
    }
  };

  return (
    <div className="flex items-center gap-1 mt-1">
      {/* Í∏∞Ï°¥ Î¶¨Ïï°ÏÖò ÌëúÏãú */}
      {localReactions.map((reaction) => (
        <Button
          key={reaction.emoji}
          variant={reaction.users.includes(user?.id || '') ? 'default' : 'outline'}
          size="sm"
          className="h-6 px-2 text-xs"
          onClick={() => handleReaction(reaction.emoji)}
        >
          <span className="mr-1">{reaction.emoji}</span>
          <span>{reaction.count}</span>
        </Button>
      ))}

      {/* Ïù¥Î™®ÏßÄ Ï∂îÍ∞Ä Î≤ÑÌäº */}
      <Popover open={isOpen} onOpenChange={setIsOpen}>
        <PopoverTrigger asChild>
          <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
            <Smile className="h-3 w-3" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-2" align="start">
          <div className="flex gap-1">
            {EMOJI_OPTIONS.map((option) => (
              <Button
                key={option.emoji}
                variant="ghost"
                size="sm"
                className="h-8 w-8 p-0"
                onClick={() => handleReaction(option.emoji)}
                title={option.label}
              >
                <span className="text-lg">{option.emoji}</span>
              </Button>
            ))}
          </div>
        </PopoverContent>
      </Popover>
    </div>
  );
}
