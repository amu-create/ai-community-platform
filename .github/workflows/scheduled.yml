name: Scheduled Tasks

on:
  schedule:
    # 매일 UTC 00:00 (한국시간 09:00)
    - cron: '0 0 * * *'
    # 매주 월요일 UTC 01:00 (한국시간 10:00)
    - cron: '0 1 * * 1'
  workflow_dispatch:
    inputs:
      task:
        description: 'Task to run'
        required: true
        type: choice
        options:
          - all
          - security-scan
          - dependency-update
          - performance-report
          - backup

jobs:
  # 1. 보안 스캔
  security-scan:
    name: Daily Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.task == 'security-scan' || github.event.inputs.task == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for critical vulnerabilities
        run: |
          if grep -q "CRITICAL" trivy-results.sarif; then
            echo "::error::Critical vulnerabilities found!"
            exit 1
          fi

  # 2. 의존성 업데이트 확인
  dependency-update:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    if: (github.event_name == 'schedule' && github.event.schedule == '0 1 * * 1') || github.event.inputs.task == 'dependency-update' || github.event.inputs.task == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Check for updates
        run: |
          npx npm-check-updates --format json > updates.json
          
      - name: Create update report
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const updates = JSON.parse(fs.readFileSync('updates.json', 'utf8'));
            
            if (Object.keys(updates).length > 0) {
              let body = '## 📦 Weekly Dependency Update Report\n\n';
              body += '### Available Updates:\n\n';
              body += '| Package | Current | Latest | Type |\n';
              body += '|---------|---------|--------|------|\n';
              
              Object.entries(updates).forEach(([pkg, versions]) => {
                const isMajor = versions.current.split('.')[0] !== versions.latest.split('.')[0];
                const type = isMajor ? '⚠️ Major' : '✅ Minor/Patch';
                body += `| ${pkg} | ${versions.current} | ${versions.latest} | ${type} |\n`;
              });
              
              // Create issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Weekly Dependency Update Report - ${new Date().toISOString().split('T')[0]}`,
                body: body,
                labels: ['dependencies', 'maintenance']
              });
            }

  # 3. 성능 리포트
  performance-report:
    name: Weekly Performance Report
    runs-on: ubuntu-latest
    if: (github.event_name == 'schedule' && github.event.schedule == '0 1 * * 1') || github.event.inputs.task == 'performance-report' || github.event.inputs.task == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Analyze bundle size
        run: |
          npm run analyze:size > bundle-report.txt
          
      - name: Run Lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: https://ai-community-platform.vercel.app
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Create performance issue
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const bundleReport = fs.readFileSync('bundle-report.txt', 'utf8');
            
            let body = '## 📊 Weekly Performance Report\n\n';
            body += `Date: ${new Date().toISOString().split('T')[0]}\n\n`;
            body += '### Bundle Size Analysis\n\n';
            body += '```\n' + bundleReport + '\n```\n\n';
            body += '### Lighthouse Scores\n\n';
            body += 'Check the uploaded artifacts for detailed Lighthouse reports.\n\n';
            body += '### Recommendations\n\n';
            body += '- [ ] Review and optimize large dependencies\n';
            body += '- [ ] Check for unused code\n';
            body += '- [ ] Optimize images and assets\n';
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Weekly Performance Report - ${new Date().toISOString().split('T')[0]}`,
              body: body,
              labels: ['performance', 'maintenance']
            });

  # 4. 데이터베이스 백업 확인
  backup-check:
    name: Database Backup Verification
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.task == 'backup' || github.event.inputs.task == 'all'
    steps:
      - name: Check Supabase backup status
        run: |
          # Supabase 자동 백업 상태 확인
          echo "Checking Supabase automatic backup status..."
          # Note: Supabase handles automatic daily backups for Pro plans
          
      - name: Create backup reminder
        if: github.event.schedule == '0 1 * * 1'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Weekly Backup Verification - ${new Date().toISOString().split('T')[0]}`,
              body: `## 🔒 Weekly Backup Checklist\n\n- [ ] Verify Supabase automatic backups are running\n- [ ] Test backup restoration process (staging environment)\n- [ ] Verify export of critical data\n- [ ] Document any schema changes\n\n### Backup Locations\n- **Database**: Supabase automatic backups (Pro plan)\n- **Code**: GitHub repository\n- **Assets**: Supabase Storage buckets\n\n### Next Steps\n1. Log into Supabase dashboard\n2. Check backup history\n3. Verify latest backup timestamp\n4. Close this issue when verified`,
              labels: ['backup', 'maintenance']
            });

  # 5. 정리 작업
  cleanup:
    name: Cleanup Old Assets
    runs-on: ubuntu-latest
    if: (github.event_name == 'schedule' && github.event.schedule == '0 1 * * 1') || github.event.inputs.task == 'all'
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            // 30일 이상 된 아티팩트 삭제
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
            
            for (const artifact of artifacts.data.artifacts) {
              if (new Date(artifact.created_at) < thirtyDaysAgo) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }
