name: CD

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'

jobs:
  # 프로덕션 배포
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm run test:unit
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      
      # Supabase 마이그레이션 실행
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Run database migrations
        run: |
          supabase link --project-ref rxwchcvgzhuokpqsjatf
          supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        continue-on-error: true
      
      # Vercel 배포는 자동으로 GitHub 통합을 통해 처리됨
      - name: Deployment notification
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const status = '${{ job.status }}';
            const color = status === 'success' ? '#28a745' : '#dc3545';
            const emoji = status === 'success' ? '✅' : '❌';
            
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: status === 'success' ? 'success' : 'failure',
              description: `Production deployment ${status}`,
              context: 'Production Deployment'
            });

  # 배포 후 검증
  post-deploy-check:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: deploy-production
    steps:
      - uses: actions/checkout@v4
      
      - name: Wait for deployment
        run: sleep 60
      
      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://ai-community-platform-sage.vercel.app)
          if [ $response -eq 200 ]; then
            echo "Health check passed"
          else
            echo "Health check failed with status code: $response"
            exit 1
          fi
      
      - name: Run smoke tests
        run: |
          npm ci
          npm run test:smoke
        env:
          BASE_URL: https://ai-community-platform-sage.vercel.app
        continue-on-error: true

  # 배포 성공 시 태그 생성
  create-release:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: post-deploy-check
    if: success()
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get next version
        id: get_version
        run: |
          # 최신 태그 가져오기
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          
          # 버전 증가 (patch version)
          version=${latest_tag#v}
          IFS='.' read -ra VERSION_PARTS <<< "$version"
          major=${VERSION_PARTS[0]}
          minor=${VERSION_PARTS[1]}
          patch=${VERSION_PARTS[2]}
          new_patch=$((patch + 1))
          new_version="v${major}.${minor}.${new_patch}"
          
          echo "New version: $new_version"
          echo "version=$new_version" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## 🚀 Deployment Information
            - **Environment**: Production
            - **Commit**: ${{ github.sha }}
            - **Deployed at**: ${{ github.event.head_commit.timestamp }}
            
            ## 📝 Changes
            ${{ github.event.head_commit.message }}
            
            ## 🔗 Links
            - [Live Site](https://ai-community-platform-sage.vercel.app)
            - [Commit Diff](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }})
          draft: false
          prerelease: false
